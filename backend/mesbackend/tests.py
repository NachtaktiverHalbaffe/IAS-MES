import socket
from django.test import TestCase
# Create your tests here.


# Test PLCStateSocket
class TestPLCStateSocket(object):

    def __init__(self):
        self.PORT = 2001
        self.FORMAT = 'utf-8'
        self.SERVER = "192.168.178.30"
        self.ADDR = (self.SERVER, self.PORT)

    def sendTestMessage(self, msg):
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect(self.ADDR)
        client.send(msg.encode(self.FORMAT))
        client.close()


class TestPLCServiceOrderSocket(object):

    def __init__(self):
        self.PORT = 2000
        self.FORMAT = 'utf-8'
        self.SERVER = "192.168.178.30"
        self.ADDR = (self.SERVER, self.PORT)

    def sendTestMessage(self, msg):
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect(self.ADDR)
        client.send(msg.encode(self.FORMAT))
        print("message send")
        try:
            while True:
                response = client.recv(2048).decode(self.FORMAT)
                if response:
                    print(response)
                    break
            client.close()
        except Exception as e:
            print(e)


print("Starting Test of cyclic state communication with the PLC")
test = TestPLCStateSocket()
try:
    print("Send test message with big endian")
    test.sendTestMessage('00010285')
    test.sendTestMessage('00020285')
    test.sendTestMessage('00030285')
    test.sendTestMessage('00040285')
    test.sendTestMessage('00050285')
    test.sendTestMessage('00060285')
    print("Test message send. Now sending test message with little endian")
    test.sendTestMessage('07000181')
except Exception as e:
    print("Test failed")
    print(e)

print("Starting Test of service order communication with the PLC")
test2 = TestPLCServiceOrderSocket()
try:
    print("send service request getFirstOpForRsc ")
    test2.sendTestMessage("3333330200010064000400000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request getOpForONoOPos")
    test2.sendTestMessage("3333330200010064000600000000000000000001000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request GetOpForASRS")
    test2.sendTestMessage("3333330200010064001900000000000100000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request GetFreeString")
    test2.sendTestMessage("3333330200050064006f00000000000000000803000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request SetPar")
    test2.sendTestMessage("333333020005006500010000004000000000080300010000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000040000007800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request OpStart")
    test2.sendTestMessage("3333330200050065000a00000000000000000803000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request OpEnd")
    test2.sendTestMessage("333333020005006500140000000000000000080300010000000000000000000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request GetShuntForTarget")
    test2.sendTestMessage("333333020005006e0001000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000200060001")
    input("Continue:")
    print("send service request getBufPos ")
    test2.sendTestMessage("3333330100009600050000000000020000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request GetBufDockedAgv ")
    test2.sendTestMessage("3333330200060096001400000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request movbuf ")
    test2.sendTestMessage("3333330100009700050000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050001000100070001000100")
    input("Continue:")
    print("send service request SetBufPos ")
    test2.sendTestMessage("3333330200020097000a00000000000200000000000000000000000200010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request delbuf ")
    test2.sendTestMessage("33333301000097000c0000000000070000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request getUnkownParts ")
    test2.sendTestMessage("333333010000c800050000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request getToAGVBuf ")
    test2.sendTestMessage("333333010000c800150000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
    print("send service request setAgvPos ")
    test2.sendTestMessage("333333010000c900010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    input("Continue:")
except Exception as e:
    print("Test failed")
    print(e)
